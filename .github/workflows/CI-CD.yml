name: Continuous Integration & Deployment

on: 
  push:
    paths-ignore:
      - "**.md"
      - "documentation/**"
  pull_request: 
    paths-ignore:
      - "**.md"
      - "documentation/**"
  schedule:
    - cron: "0 22 * * 5" #At 10PM every Friday

jobs:
  build:
    name: Provision the test container and run the tests
    runs-on: ubuntu-latest
    steps:

    - name: Checkout repo content 
      uses: actions/checkout@v2

    - name: Create .env file # docker-compose looks for .env file even though it is not required to spin up the test container
      run: |
        touch .env

    - name: Spin up test container and run the tests 
      run: docker-compose up webapp-test

    - name: Send Notification on Slack
      if: always()
      uses: ravsamhq/notify-slack-action@v1
      with:
        status: ${{ job.status }}
        notification_title: '{workflow} has {status_message}'
        message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}>'
        footer: 'Linked Repo <{repo_url}|{repo}>'
        mention_users: 'U03GZQ5GCQ0'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  publish:
    name: Login to DockerHub, build an image and publish it
    runs-on: ubuntu-latest
    needs: build
    if: ${{github.event_name == 'push' && github.ref == 'refs/heads/main'}}
    steps:

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/to-do-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/to-do-app:${{ github.sha }}

  deploy:
    name: Deploy the latest version of the image on Azure
    runs-on: ubuntu-latest
    needs: publish
    steps:

      - name: Deploy the image on Azure by sending a POST request to deploy webhook url
        run: |
          curl -dH -X POST ${{ secrets.DEPLOY_WEBHOOK_URL }}